Git Lab Workflow
The below is an example of workflow for creating branches for each new lab.

    Replace the <new-branch-name> items below with your appropriate formed <studentdirectoryname-labnumber-lab-name> branch name.
    An example <new-branch-name> would be bruce-lab01-python-exercise

    It's good practice to get the current git status to see what branch is current, what files have been changed, and other details:
    git status

    Reminder, git branch can be used to see our current branch and other available local branches:
    git branch

    Checkout the main branch since we want to keep it syncronized with remote:
    git checkout main

    Retrieve the remote changes to main branch and sync them to local repository:
    git pull origin main

    Create a new branch <new-branch-name> from current state of main branch:
    git checkout -b <new-branch-name>

    Do some code changes.

    Add all the changes made to git tracking (or add only <filename> or <directoryname> changes):
    git add -A

    Commit the changes made to the branch:
    git commit -m <commit message>

    Push local changes to branch <new-branch-name> to the remote repository origin:
    git push origin <new-branch-name>

    Do some more code changes.

    Add all the changes made to git tracking:
    git add -A

    Commit the changes made to the branch:
    git commit -m <commit message>

    Push local changes to branch <new-branch-name> to the remote repository origin:
    git push origin <new-branch-name>

    When lab is completed, create pull request on GitHub.

    After lab has been graded and pull request approved, perform the following two commands to remove the reference to the remote branch, and then delete your local branch:
        git remote update origin --prune
        git branch -d <graded-and-merged-branch-name>

    Repeat process for new labs.

Use the following to switch between multiple in-process lab branches.

    Git add and commit changes to current branch:
        git add -A
        git commit -m <commit message>

    Checkout the different branch we want to work on:
        git checkout <a-branch-name>

    Do the code changes for this branch.

    Git add and commit changes to the new current branch <a-branch-name>:
        git add -A
        git commit -m <commit message>

    Checkout some other branch we want to work on:
        git checkout <some-other-branch-name>

    Repeat process as needed.

Use the following to delete branches for labs which have already been graded.

    NOTE: We delete the branches after they have been merged into main since the work has been completed and all the changes have been recorded in the commits. We no longer need the branches.

    Sync our local record of remote branches. This will remove local references to branches which have been deleted on remote:
        git remote update origin --prune

    Delete the local copy of the branch:
        git branch -d <lab-branch-which-has-been-graded>

